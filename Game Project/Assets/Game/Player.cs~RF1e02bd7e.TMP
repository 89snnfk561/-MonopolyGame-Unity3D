using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

public class Player : MonoBehaviour
{
    [Header("Player")] 
    public List<Transform> PlayerList = new List<Transform>();
    public PlayerState[] playerStates;
    int[] money;

    [Space]

    [Header("Camera")]
    public List<Transform> TCPs = new List<Transform>();
    public Transform MainCamera;
    public Transform DICECamera;
    public Transform MAPCamera;
    public Route currentRoute;
    int[] routePosition;

    [Space]

    [Header("Text&UI")]
    public List<Button> Buttons = new List<Button>();
    public Text[] texts;


    int steps;
    bool isMoving;
    int current = 0;
    int next = 0;

    string[] PlayerName =
    {
        "忒修斯",
        "阿里阿德涅",
        "代達洛斯",
        "伊卡洛斯"
    };

    private KeyCode[] keyCodes = {
         KeyCode.Alpha1,
         KeyCode.Alpha2,
         KeyCode.Alpha3,
         KeyCode.Alpha4,
         KeyCode.Alpha5,
         KeyCode.Alpha6,
         KeyCode.Alpha7,
         KeyCode.Alpha8,
         KeyCode.Alpha9
     };


    private void Awake()
    {
        playerStates = new PlayerState[GameData.PlayerCount];
        routePosition = new int[GameData.PlayerCount];
        money = new int[GameData.PlayerCount];

        for(int i = 0; i < GameData.PlayerCount; i++)
        {
            playerStates[i] = PlayerState.finish;
            routePosition[i] = 0;
            money[i] = 0;
        }
        for (int i = GameData.PlayerCount; i < PlayerList.Count; i++)
        {
            PlayerList[i].gameObject.SetActive(false);
        }

    }
    private void Update()
    {
        if(current == next)
        {
            playerStates[current] = PlayerState.start;
            next += 1;
            next %= GameData.PlayerCount;
        }

        Buttons[0].onClick.AddListener(Roll);
        Buttons[1].onClick.AddListener(EndTurn);

        for(int i = 0; i < 9; i++)
        {
            if (Input.GetKeyDown(keyCodes[i]) && !isMoving && playerStates[current] == PlayerState.start)
            {
                Cheat(i+1);
            }
        }

        if (Input.GetKeyDown(KeyCode.Space))
        {
            UpdateUI();
            foreach (Text T in texts)
            {
                T.gameObject.SetActive(true);
            }
        }
        else if(Input.GetKeyUp(KeyCode.Space))
        {
            foreach(Text T in texts)
            {
                T.gameObject.SetActive(false);
            }
        }

        if (GameData.DiceRollEnd && !isMoving && playerStates[current] == PlayerState.start)
        {
            MainCamera.gameObject.SetActive(true);
            GameData.DiceRollEnd = false;
            steps = GameData.steps;
            Debug.Log("Dice Rolled " + steps);
            StartCoroutine(Move());

        }
        //currentRoute.childNodeList[routePosition[current]].SendMessage("calculate"); 格子效果
        
    }

    IEnumerator Move()
    {
        if (isMoving)
        {
            yield break;
        }
        isMoving = true;

        while (steps > 0)
        {
            routePosition[current]++;
            routePosition[current] %= currentRoute.childNodeList.Count;

            Vector3 nextPos = currentRoute.childNodeList[routePosition[current]].position;

            Vector3 vec = new Vector3(nextPos.x, PlayerList[current].position.y, nextPos.z);
             PlayerList[current].LookAt(vec);

            while (MoveToNextNode(nextPos)) { yield return null; }

            
            yield return new WaitForSeconds(0.1f);
            steps--;
        }
        if(steps == 0)
        {
            playerStates[current] = PlayerState.finish;

            Buttons[1].gameObject.SetActive(true);


        }

        isMoving = false;
        
    }
    
    void Roll()
    {
        if (Buttons[0] && !isMoving && playerStates[current] == PlayerState.start)
        {
            DICECamera.gameObject.SetActive(true);
            MainCamera.gameObject.SetActive(false);
            GameData.DiceRollStart = true;
            Buttons[0].gameObject.SetActive(false);
        }
    }
    void Cheat(int n)
    {
        if (Buttons[0] && !isMoving && playerStates[current] == PlayerState.start)
        {
            GameData.steps = n;
            steps = n;
            Buttons[0].gameObject.SetActive(false);
            Debug.Log("cheating steps " + steps);
            StartCoroutine(Move());
        }
    }
    void EndTurn()
    {
        if (steps == 0)
        {
            TCPs[current].gameObject.SetActive(false);
            TCPs[next].gameObject.SetActive(true);
            current = next;
            Buttons[0].gameObject.SetActive(true);
            Buttons[1].gameObject.SetActive(false);
        }
    }

    void UpdateUI()
    {
        texts[0].text = "Now Playing P" + (current+1) +"\n\n";
        texts[0].text += "Name: " + PlayerName[current] + "\n";
        texts[0].text += "Money: " + money[current] + "\n";

        texts[1].text = "Block No. " + (routePosition[current]+1) + "\n\n";
        texts[1].text += "Type: " + "\n";

        int UIcount = 0;
        for (int i = 0; i < GameData.PlayerCount; i++)
        {
            if(routePosition[current] == routePosition[i] && i != current)
            {
                texts[1].text += "P"+ (i+1) + ",  ";
                UIcount++;
            }
        }
        if(UIcount > 0)
        {
            texts[1].text += " on the same block.\n";
        }


    }
    bool MoveToNextNode(Vector3 goal)
    {
        return goal != (PlayerList[current].position = Vector3.MoveTowards(PlayerList[current].position, goal, GameData.speed * Time.deltaTime));
    }
}
